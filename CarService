using System;
using System.Collections.Generic;

namespace CarService
{
    internal class Program
    {
        static void Main(string[] args)
        {
            AutoRepairShop autoRepairShop = new();
            autoRepairShop.Work();
        }
    }

    class AutoRepairShop
    {
        Queue<Client> _clientsQueue = new();
        Warehouse warehouse = new();
        RepairMaster repairMaster;
        CashRegister cashRegister = new();
        private bool _isSelectStart = false;
        private bool _isSelectExite = false;
        private Dictionary<DetailForWarehouse, int> DetailsInStockWarehouse;
        private List<string> GroupDetail = new();
        private bool IsSolvent = false;
        Random random = new Random();
        public AutoRepairShop()
        {
            repairMaster = new("Борис");
        }

        public void Work()
        {
            ShowMenuStart();

            if (ChoiceLaunchShop())
            {
                FillGroupDetail();
                CreateCustomersQueue();

                while (_isSelectExite == false | _clientsQueue.Count != 0)
                {
                    ChoiceMenu();
                }
            }
        }

        private void ShowMenuStart()
        {
            Console.WriteLine("");
            Console.WriteLine("Добро пожаловать в автомастерскую");
            Console.WriteLine("1 - Приступить к работе");
            Console.WriteLine("Другое - Выход");
        }

        private bool ChoiceLaunchShop()
        {
            string userInput;


            userInput = Console.ReadLine();

            switch (userInput)
            {
                case "1":
                    _isSelectStart = true;
                    break;
            }

            Console.Clear();
            return _isSelectStart;
        }

        private void CreateCustomersQueue()
        {
            List<string> name = new()
            {
                "Александр",
                "Михаил",
                "Даниил",
                "Матвей",
                "Иван",
                "Кирилл",
                "Егор",
                "Дмитрий",
                "Роман",
                "Артем",
                "Анна",
                "Мария",
                "Софья",
                "Александра",
                "Ксения",
                "Василиса",
                "Анастасия",
                "Алиса",
                "Вероника",
                "Полина",
            };
            int countCustomer = 10;
            string randomName;

            for (int i = 0; i <= countCustomer; i++)
            {
                randomName = name[random.Next(0, name.Count)];
                _clientsQueue.Enqueue(new Client(randomName));
            }
        }

        public void ShowCashRegister()
        {
            cashRegister.ShowInfo();
        }

        public void ReceiveCar()
        {
            Client client = _clientsQueue.Dequeue();
            int sleepTimeStep = 80;
            int countStepForSleep = 7;
            int count = 0;
            int price;
            bool isReplacementDetailDishonest = false;
            Detail brokenDetail;
            DetailForWarehouse newDetail;
            Car clientCar = client.Car;

            Console.Clear();
            Console.WriteLine($"Клиент - {client.Name} : Добрый день! Вот моя машина, пожалуйста проверьте ее, что то барахлит");
            Console.WriteLine($"Мастер сервиса - {repairMaster.Name}: хорошо сейчас проверим!");

            while (count != countStepForSleep)
            {
                System.Threading.Thread.Sleep(sleepTimeStep);
                Console.Write(" . ");
                count++;
            }

            brokenDetail = clientCar.BrokenDetail;
            price = warehouse.GetPriceDetail(brokenDetail.Name);

            Console.WriteLine($"{repairMaster.Name}: Я обнаружил сломанную деталь, это: {client.Car.BrokenDetail.Name}");
            Console.WriteLine($"{repairMaster.Name}: Стоимость детали и ремонта составит: {price}");

            if (IsClientSolvent(client, price) == false)
            {
                Console.WriteLine($"{repairMaster.Name}: У вас недостаточно средств, пожалуйста покиньте ремонтный бокс и возвращайтесь когда у вас появятся средства.Извините");
                Console.ReadLine();
            }
            else
            {
                Console.WriteLine($"{repairMaster.Name}: Так как у вас достаточно средств, предлагаю замену детали");
                Console.WriteLine($"{client.Name}: Хорошо меняем!");
                
                Console.ReadLine();

                if ((warehouse.TryGetDetail(brokenDetail.Name, out newDetail) == false))
                {
                    isReplacementDetailDishonest = true;

                }

                ReplacementDetail(client, newDetail, isReplacementDetailDishonest);
                cashRegister.ReplenishmentAmount(price);
                client.Buy(price);
                Console.WriteLine("Замена прошла удачно!");
                Console.WriteLine("Клиент оплатил работу и покинул сервис!");
                Console.ReadLine();
            }

            if (isReplacementDetailDishonest  == true& ChanceFindViolation()==true)
            {
                Console.Clear();
                Console.WriteLine(" Удача на стороне клиента, он обнаружил нарушение! Сервис заменил не ту деталь!");
                Console.WriteLine(" Теперь сервис должен выплатить компенсацию клиенту!\n");
                BonusPayment(price, client);
                Console.ReadLine();
            }
        }

        public void TroubleshootingCar()
        {

        }

        private void ChoiceMenu()
        {
            Console.Clear();
            string userInput;

            Console.WriteLine("  Наш сервис популярен к нам выстроилась очередь из клиентов на ремонт авто");
            Console.WriteLine("  Нажмите:\n  1 - Чтобы принять клиента");
            Console.WriteLine("  2 - Посетить склад запчастей");
            Console.WriteLine("  3 - Закрыть магазин");

            userInput = Console.ReadLine();

            switch (userInput)
            {
                case "1":
                    ReceiveCar();
                    break;
                case "2":
                    ChoiceMenuWarehouse();
                    break;
                case "3":
                    _isSelectExite = true;
                    break;
            }
        }

        public void ChoiceMenuWarehouse()
        {
            string userInput;

            Console.Clear();
            Console.WriteLine("  Нажмите:\n  1 - Проверить сток запчастей");
            Console.WriteLine("  2 - Закупить детали");
            userInput = Console.ReadLine();
            

            switch (userInput)
            {
                case "1":
                    ShowStockDetailsWarehouse();
                    break;
                case "2":
                    PurchaseDetails();
                    break;
            }

            Console.Clear();
        }

        public void ShowStockDetailsWarehouse()
        {
            Console.WriteLine("В наличии на складе:");

            DetailsInStockWarehouse = warehouse.GetDetailsInStock();

            foreach (var detail in DetailsInStockWarehouse)
            {
                Console.WriteLine($"{detail.Key.Name}  -   {detail.Value}шт, цена за штуку {detail.Key.Price}");
            }

            Console.ReadLine();
        }

        public void PurchaseDetails()
        {
            string userInput;
            bool isDetailBuy = false;
            bool isEnoughMoney = true;
            bool isInputExite=false;
            Detail newDetail = null;
            List<string> DetailsGroup = warehouse.ShowDetailGroup();

            while (isDetailBuy == false & isEnoughMoney == true& isInputExite==false)
            {
                Console.Clear();
                Console.WriteLine("Для выхода нажмите (E)xite\n");
                Console.WriteLine($"Баланс средств:  {cashRegister.AmoutMoney}");
                Console.WriteLine("Введите название детали для ее покупки:");

                for (int i = 0; i < DetailsGroup.Count; i++)
                {
                    Console.WriteLine($"{DetailsGroup[i]}");
                }               

                userInput = Console.ReadLine();

                if (userInput.ToLower() == "e")
                {
                    isInputExite = true;
                }
                else
                {
                    foreach (var detail in warehouse.GetDetailsInStock())
                    {
                        if (detail.Key.Name.ToLower() == userInput.ToLower())
                        {
                            if (cashRegister.DebitingFunds(detail.Key.Price) == true)
                            {
                                warehouse.AddDetail(detail.Key);
                                isDetailBuy = true;
                                break;
                            }
                            else
                            {
                                Console.WriteLine("Недостаточно средств");
                                isEnoughMoney = false;
                                Console.ReadLine();
                                break;
                            }
                        }
                    }
                    if (DetailsGroup.Contains(userInput))
                    {
                        if (cashRegister.DebitingFunds(warehouse.GetPriceDetail(DetailsGroup[DetailsGroup.IndexOf(userInput)])) == true)
                        {
                            newDetail = new Detail(DetailsGroup[DetailsGroup.IndexOf(userInput)]);
                            warehouse.CreateDetail(newDetail);
                            isDetailBuy = true;
                        }
                        else
                        {
                            Console.WriteLine("Недостаточно средств");
                            isEnoughMoney = false;
                            Console.ReadLine();
                            break;
                        }
                        
                    }
                    else if (isDetailBuy == false&isEnoughMoney == true)
                    {
                        Console.WriteLine("Вы ввели неверные данные");
                        Console.ReadLine();
                    }
                }
            }
        }

        private void FillGroupDetail()
        {
            foreach (var detail in warehouse.GetDetailsInStock())
            {
                GroupDetail.Add(detail.Key.Name);
            }
        }

        private bool IsClientSolvent(Client client, int price)
        {
            if (price <= client.GetAmountInWallet())
            {
                IsSolvent = true;
            }

            return IsSolvent;
        }

        private void ReplacementDetail(Client client, DetailForWarehouse newDetail, bool isReplacementDetailDishonest)
        {
            bool isDetailRepaired = true;

            if (isReplacementDetailDishonest == false)
            {
                warehouse.SaleDetail(newDetail);
            }
            else
            {
                warehouse.SaleDetail(warehouse.GetRandomDetail());
            }

            client.Car.SetBrokenDetail(isDetailRepaired);
        }

        private void BonusPayment(int price, Client client)
        {
            int halfPart = 2;
            int minBonus = price / halfPart;
            int maxBonus = price;
            int sumBonus = random.Next(minBonus, maxBonus)+maxBonus;

            if (cashRegister.DebitingFunds(sumBonus)==false)
            {
                Console.WriteLine($"{repairMaster.Name} : К сожалению мастерская не может оплатить штраф, так как у нее  не хватает средств");
                Console.WriteLine($"{repairMaster.Name} : Мастерская будет закрыта, вам в ближайшее время.");
                Console.ReadLine();
                _clientsQueue.Clear();
            }
            else
            {
                client.ReplenishmentWallet(sumBonus);

            }
        }

        private bool ChanceFindViolation()
        {
            bool isClientFindViolation = false;
            int maxChance=100;
            int halfMaxChance = maxChance / 2;
            int number=random.Next(maxChance);

            if (number< halfMaxChance )
            {
                isClientFindViolation = true;
            }

            return isClientFindViolation;
        }

    }




    class RepairMaster : Human
    {
        public RepairMaster(string name) : base(name)
        {

        }
    }

    class CashRegister
    {
        private readonly Random _random = new();
        private readonly int _minAmoutMoney = 0;
        private readonly int _maxAmoutMoney = 0;
        private readonly ConsoleColor color = ConsoleColor.Red;
        private readonly string _currency = " руб.";
        private int _amoutMoney;
        public int AmoutMoney { get { return _amoutMoney; } }


        public CashRegister()
        {
            _amoutMoney = _random.Next(_minAmoutMoney, _maxAmoutMoney);
        }

        public bool DebitingFunds(int purchasePrice)
        {
            bool isPurchaseCompleted = false;

            if (purchasePrice <= _amoutMoney)
            {
                _amoutMoney -= purchasePrice;
                isPurchaseCompleted = true;
            }

            return isPurchaseCompleted;
        }

        public void ShowInfo()
        {
            int positionX = 5;
            int positionY = 30;
            int positionDefaultX = Console.CursorLeft;
            int positionDefaultY = Console.CursorTop;

            Console.ForegroundColor = color;
            Console.SetCursorPosition(positionX, positionY);
            Console.WriteLine($"Сумма в кассе : {_amoutMoney}{_currency}");
            Console.SetCursorPosition(positionDefaultX, positionDefaultY);
            Console.ResetColor();
        }

        public void ReplenishmentAmount(int price)
        {
            if (price > 0)
            {
                _amoutMoney += price;
            }
            else if (price + _amoutMoney >= _maxAmoutMoney)
            {
                _amoutMoney = _maxAmoutMoney;
            }
        }
    }

    class Warehouse
    {
        public Dictionary<DetailForWarehouse, int> Details = new();
        public Dictionary<string, int> DetailGroup = new();
        public Warehouse()
        {
            CreateDetails();
        }

        public void CreateDetails()
        {
            Random random = new Random();
            int maxCountDetails = 1;
            int minCountDetails = 1;

            Dictionary<string, int> DetailsGroup = new()
            {
                { "Стойка амортизатора", 4000 },
                { "Тормозные колодки", 2000 },
                { "Воздушный фильтр", 400 },
                { "Масляный фильтр ", 480 },
                { "Ремень ГРМ", 5000 },
                { "Свечи зажигания", 6000 },
                { "Аккумулятор", 8000 },
                { "Набор плавких предохранителей", 100 }
            };

            foreach (var item in DetailGroup)
            {
                int number = random.Next(minCountDetails, maxCountDetails);

                Details.Add(new DetailForWarehouse(item.Key, item.Value), number);
            }
        }

        public void ShowStockDetails()
        {
            Console.WriteLine(" На скдаже в наличии есть:");

            foreach (var detail in Details)
            {

                Console.WriteLine($"{detail.Key.Name} - {detail.Value}шт ,цена за штуку {detail.Key.Price}");
            }
        }

        public Dictionary<DetailForWarehouse, int> GetDetailsInStock()
        {
            Dictionary<DetailForWarehouse, int> tempDetails = new();

            foreach (var detail in Details)
            {
                tempDetails.Add(detail.Key, detail.Value);
            }

            return tempDetails;
        }

        public List<string> ShowDetailGroup()
        {
            List<string> tempDetailsGroup = new();

            foreach (var item in DetailGroup)
            {
                tempDetailsGroup.Add(item.Key);
            }

            return tempDetailsGroup;
        }

        public bool TryGetDetail(string name, out DetailForWarehouse newDetail)
        {
            bool isAvaidle = false;

            newDetail = null;

            foreach (var detail in Details)
            {
                if (detail.Key.Name == name & detail.Value > 0)
                {
                    newDetail = detail.Key;
                    isAvaidle = true;
                    break;
                }
            }

            return isAvaidle;
        }
        public void AddDetail(DetailForWarehouse purchasedDetail)
        {

        
        int countDetails = Details[purchasedDetail];
        Details[purchasedDetail] = countDetails++;
        }
    public void CreateDetail(Detail newDetail)
    {
        Random random = new Random();


            int number = 1;


        foreach (var item in DetailGroup)
        {
                if (item.Key== newDetail.Name)
                {
                    Details.Add(new DetailForWarehouse(item.Key, item.Value), number);
                    break;
                }            
        }

    }

        public int GetPriceDetail(string detailName)
        {
            int price = 0;

            foreach (var detail in Details)
            {
                if (detail.Key.Name == detailName)
                {
                    price = detail.Key.Price;
                    break;
                }
            }
            return price;
        }

        public void SaleDetail(DetailForWarehouse newDetail)
        {
            if (Details.ContainsKey(newDetail))
            {
                Details.TryGetValue(newDetail, out int countDetails);
                countDetails--;
                Details[newDetail]= countDetails;
            }
        }

        public DetailForWarehouse GetRandomDetail()
        {
            bool isAvaidle = false;
            DetailForWarehouse randomDetail = null;
            Random random = new Random();
            int number;
            int count ;

            while (isAvaidle == false)
            {
                count = 0;
                number = random.Next(0, Details.Count);

                foreach (var detail in Details)
                {
                    if (count != number)
                    {
                        count++;
                    }
                    else
                    {
                        if (TryGetDetail(detail.Key.Name, out DetailForWarehouse newDetail))
                        {
                            randomDetail = newDetail;
                            isAvaidle = true;                           
                        }
                        else
                        {
                            isAvaidle = false;                           
                        }
                        break;
                    }
                }
            }

            return randomDetail;
        }
    }

    class Detail
    {
        public string Name { get; private set; }

        public Detail(string name)
        {
            Name = name;
        }
    }

    class DetailForWarehouse : Detail
    {
        public int Price { get; private set; }
        public DetailForWarehouse(string name, int price) : base(name)
        {
            Price = price;
        }
    }


    class Human
    {
        public string Name { get; private set; }



        public Human(string name)
        {
            Name = name;
        }

    }


    class Client : Human
    {
        private readonly Wallet _wallet = new();
        public Car Car = new();
        public Client(string name) : base(name)
        {

        }


        public void Buy( int price)
        {
_wallet.Purchase(price);
        }

        public int GetAmountInWallet()
        {
            return _wallet.AmoutMoney;
        }

        public void ReplenishmentWallet(int price)
        {
            _wallet.ReplenishmentAmount(price);
        }

    }

    class Car
    {
        public Detail BrokenDetail { get; private set; }

        Dictionary<int, Detail> Details = new();
        Random random = new Random();
        private bool isDetailRepaired;
        public Car()
        {
            SetDetails();
            isDetailRepaired = false;
            SetBrokenDetail(isDetailRepaired);

        }

        public void SetBrokenDetail(bool isDetailRepaired)
        {
            if (isDetailRepaired == true)
            {
                BrokenDetail = new Detail("");
            }
            else
            {
                int mumber = random.Next(0, Details.Count);
                BrokenDetail = Details[mumber];
            }

        }

        public void SetDetails()
        {
            List<string> DetailsName = new()
            {
                { "Стойка амортизатора" },
                { "Тормозные колодки" },
                { "Воздушный фильтр" },
                { "Масляный фильтр " },
                { "Ремень ГРМ" },
                { "Свечи зажигания" },
                { "Аккумулятор" },
                { "Набор плавких предохранителей" }
            };

            for (int i = 0; i < DetailsName.Count; i++)
            {
                Details.Add(i, (new Detail(DetailsName[i])));
            }
        }
    }

    class Wallet
    {
        private readonly Random _random = new();
        private readonly int _minAmoutMoney = 5000;
        private readonly int _maxAmoutMoney = 20000;
        private readonly ConsoleColor color = ConsoleColor.Red;
        private readonly string _currency = " руб.";
        private int _amoutMoney;
        public int AmoutMoney { get { return _amoutMoney; } }

        public Wallet()
        {
            _amoutMoney = _random.Next(_minAmoutMoney, _maxAmoutMoney);
        }

        public void Purchase(int purchasePrice)
        { 
                _amoutMoney -= purchasePrice;

        }
        public void ReplenishmentAmount(int price)
        {
            if (price > 0)
            {
                _amoutMoney += price;
            }
            else if (price + _amoutMoney >= _maxAmoutMoney)
            {
                _amoutMoney = _maxAmoutMoney;
            }
        }

    }

}

